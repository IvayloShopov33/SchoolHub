@using SchoolHub.Services
@inject IStudentService studentService
@inject ITeacherService teacherService

@{
    ViewData["Title"] = "Class Chat";
    var classId = ViewBag.ClassId;
    var userId = ViewBag.UserId;
    string userFullName = null;

    var student = await this.studentService.GetStudentByUserIdAsync(userId);
    if (student != null)
    {
        userFullName = student.FullName;
    }

    var teacher = await this.teacherService.GetTeacherByUserIdAsync(userId);
    if (teacher != null)
    {
        userFullName = teacher.FullName;
    }
}

<h2>@ViewBag.Class's Class Chat</h2>
<div id="chatWindow" class="chat-window">
    <!-- Messages will appear here -->
</div>

<div id="typingIndicator" class="text-muted"></div>

<div class="input-group mt-3">
    <input type="text" id="messageInput" class="form-control" placeholder="Type a message..." />
    <button id="sendButton" class="btn btn-primary">Send</button>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>
    <script>
        const classId = "@classId";
        const senderId = "@userId";
        const senderName = "@userFullName";
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Load message history
        connection.on("FetchMessageHistory", function (messages) {
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.innerHTML = ""; // Clear existing messages

            messages.forEach(msg => {
                appendMessageToChat(msg.senderName, msg.message, msg.timestamp, msg.isRead);
            });
        });

        // Receive group messages
        connection.on("ReceiveMessage", function (senderName, message, timestamp, isRead) {
            appendMessageToChat(senderName, message, timestamp, isRead);

            connection.invoke("MarkAsRead", classId)
                .catch(err => console.error(err.toString()));
        });

        // Show typing indicator
        connection.on("ShowTypingIndicator", function (typingUserName) {
            const typingIndicator = document.getElementById("typingIndicator");

            // Only show the typing indicator if it's someone else typing
            typingIndicator.textContent = `${typingUserName} is typing...`;
            clearTimeout(typingIndicator.timeout); // Clear previous timeout
            typingIndicator.timeout = setTimeout(() => typingIndicator.textContent = "", 2000);
        });

        function appendMessageToChat(senderName, message, timestamp, isRead) {
            const chatWindow = document.getElementById("chatWindow");
            const msgDiv = document.createElement("div");

            const sender = document.createElement("strong");
            sender.textContent = `${senderName}: `;
            msgDiv.appendChild(sender);

            const content = document.createTextNode(`${message} `);
            msgDiv.appendChild(content);

            const time = document.createElement("small");
            time.classList.add("text-muted");
            time.textContent = `(${timestamp}) `;
            msgDiv.appendChild(time);

            if (isRead) {
                const readReceipt = document.createElement("strong");
                readReceipt.classList.add("read-message");
                readReceipt.textContent = " (Read)";
                msgDiv.appendChild(readReceipt);
                msgDiv.classList.add("read-message");
            }
            else {
                msgDiv.classList.add("unread-message");
            }

            chatWindow.appendChild(msgDiv);
        }

        connection.start().then(function () {
            connection.invoke("JoinClass", classId);
            connection.invoke("FetchMessageHistory", classId)
                .then(() => {
                    connection.invoke("MarkAsRead", classId)
                        .catch(err => console.error(err.toString()));
                });
        });

        // Notify server that user is typing
        const typingInput = document.getElementById("messageInput");
        let typingTimeout;

        typingInput.addEventListener("input", function () {
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                connection.invoke("Typing", classId, senderName).catch(function (err) {
                    console.error(err.toString());
                });
            }, 300); // Delay sending typing notification to reduce spam
        });

        // Send a group message
        document.getElementById("sendButton").addEventListener("click", function () {
            const message = document.getElementById("messageInput").value;
            if (!message.trim()) {
                alert("Message cannot be empty!");
                return;
            }

            connection.invoke("SendMessage", classId, senderId, senderName, message)
                .then(() => {
                    document.getElementById("messageInput").value = ""; // Clear the input
                })
                .catch(function (err) {
                    console.error(err.toString());
                });
        });

        connection.on("MarkAsRead", function (classId) {
            const chatWindow = document.getElementById("chatWindow");
            Array.from(chatWindow.children).forEach((msgDiv) => {
                if (msgDiv.classList.contains("unread-message")) {
                    msgDiv.classList.remove("unread-message");
                    msgDiv.classList.add("read-message");
                    const read = document.createElement("strong");
                    read.textContent = ` (Read)`;
                    msgDiv.appendChild(read);
                }
            });
        });
    </script>
}
